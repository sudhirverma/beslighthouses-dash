import React, { useState } from "react";

import {
  Card,
  Container,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TablePagination,
  TableRow,
} from "@mui/material";
import { getComparator } from "../../ProjectOfInterestTrack";
import { filter } from "lodash";

const TABLE_HEAD = [
  { id: "id", label: "ID", alignRight: false },
  { id: "Package", label: "Packages", alignRight: false },
  { id: "Summary", label: "Summary", alignRight: false },
  { id: "Affected Version", label: "Affected Version", alignRight: false },
  { id: "Fix", label: "Fix", alignRight: false },
];

// Fixme: Code refactor

function applySortFilter(array: any, comparator: any, query: any) {
  const stabilizedThis = array.map((el: any, index: any) => [el, index]);
  stabilizedThis.sort((a: any, b: any) => {
    const order = comparator(a[0], b[0]);
    if (order !== 0) return order;
    return a[1] - b[1];
  });
  if (query) {
    return filter(
      array,
      (_user: any) => _user.id.toLowerCase().indexOf(query.toLowerCase()) !== -1
    );
  }
  return stabilizedThis.map((el: any) => el[0]);
}

export default function Vulnerability({ data, filterName }: any) {
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(5);

  const filteredUsers = applySortFilter(
    data,
    getComparator("desc", "name"),
    filterName
  );

  const handleChangePage = (
    event: any,
    newPage: React.SetStateAction<number>
  ) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage: any = (event: { target: { value: string } }) => {
    setPage(0);
    setRowsPerPage(parseInt(event.target.value, 10));
  };

  return (
    <>
      <Container style={{ padding: "0px", marginTop: "12px" }}>
        <Card>
          <TableContainer sx={{ minWidth: 800, color: "red" }}>
            <Table>
              <TableHead>
                <TableRow>
                  {TABLE_HEAD.map((headCell: any) => (
                    <TableCell
                      sx={{ color: "#637381", backgroundColor: "#F4F6F8" }}
                      key={headCell.id}
                      align={headCell.alignRight ? "right" : "left"}
                    >
                      {headCell.label}
                    </TableCell>
                  ))}
                </TableRow>
              </TableHead>
              <TableBody>
                {filteredUsers
                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
                  .map((row: any, index: number) => {
                    return (
                      <TableRow hover key={index} tabIndex={-1}>
                        <TableCell
                          align="center"
                          sx={{ paddingLeft: "10px" }}
                          padding="none"
                        >
                          <a href={`/vulnerability_report/:${row.id}`}>
                            {row.id}
                          </a>
                        </TableCell>
                        <TableCell align="left">{row.package}</TableCell>
                        <TableCell align="left">{row.summary}</TableCell>
                        <TableCell align="left">
                          {row.affected[0].ranges[0].Events.Introduced} ...
                        </TableCell>
                        <TableCell align="left">
                          {row.affected[0].ranges[0].Events.Fixed}
                        </TableCell>
                      </TableRow>
                    );
                  })}
              </TableBody>
            </Table>
          </TableContainer>
          <TablePagination
            sx={{
              ".MuiTablePagination-selectLabel": {
                margin: "auto",
              },
              ".MuiTablePagination-displayedRows": {
                margin: "auto",
              },
            }}
            rowsPerPageOptions={[5, 10, 25]}
            component="div"
            count={data.length}
            rowsPerPage={rowsPerPage}
            page={page}
            onPageChange={handleChangePage}
            onRowsPerPageChange={handleChangeRowsPerPage}
          />
        </Card>
      </Container>
    </>
  );
}
